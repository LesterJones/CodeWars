# Since numpy is disabled, I copy/pasted a function to do matrix multiplication.
def matrix_multiply(a, b):
    c = [[] for _ in range(len(a))]
    for i in range(len(a)):        
        for j in range(len(a)):
            sum = 0
            for k in range(len(a)):
                sum += a[i][k] * b[k][j]
            c[i].append(sum)
    return c

def padovan(n):
    # Base cases
    if 0 <= n <= 2:
        return 1
    transformation_matrix = [[0,1,0],[0,0,1],[1,1,0]]
    base_vector = [[0,0,1],[0,0,1],[0,0,1]]
    
    matrices = {1:transformation_matrix}
    number = n - 2
    number = bin(number)[2::]
    print(number, 'binary')
    highest_multiple = 2**(len(number)-1)
    
    # Generate all needed matrices
    iteration = 2
    while iteration <= highest_multiple:
        transformation_matrix = matrix_multiply(transformation_matrix, transformation_matrix)
        matrices[iteration] = transformation_matrix
        iteration = iteration * 2

    # Use our matrices to calculate our final result
    number = number[::-1]
    i = 0
    while i < len(number):
        if number[i] == '1':
            reference = 2**i
            base_vector = matrix_multiply(matrices[reference], base_vector)
        i = i + 1
    return base_vector[-1][-1]
