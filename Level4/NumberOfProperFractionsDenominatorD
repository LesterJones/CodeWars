#Re-read Wolfram Alpha totient function

import math
from itertools import combinations

def find_prime_factors(n):
    number = n
    factors = list()
    while number % 2 == 0:
        factors.append(2)
        number = number // 2
    
    i = 3
    while i <= math.sqrt(number):
        #print(number)
        if number % i == 0:
            factors.append(i)
            number = number // i
            continue
        i = i + 2
    if number != 1:
        factors.append(number)
        
    return factors
                

def proper_fractions(n):
    #return n
    if n <= 1:
        return 0
    factors = find_prime_factors(n)
    
    #If there is only one factor then n is prime and the totient = n - 1
    if len(factors) == 1:
        return factors[0] - 1
    
    factors = set(factors)
    total = n
    for factor in factors:
        total = total * (1 - (1 / factor))
    return round(total, 0)
