import itertools

# find_combos() and assign_rows().  The idea is that given our clues there are a limited number of possible
# permutations that fit any row or column.  I am starting by finding the possible
# combinations.  Once those are obtained.  I'm going to use backtracking to find the ones
# that fit togeather to solve the board.

def find_combos(n):
    numbers = [i for i in range(1, n + 1)]
    combos = itertools.permutations(numbers, n) 
    combos = list(combos)
    combo_dict = dict()
    for combo in combos:
        test_left = 0
        test_right = 0
        count_left = 0
        count_right = 0
        i = 0
        while i < len(combo):
            if combo[i] > test_left:
                test_left = combo[i]
                count_left = count_left + 1
            i = i + 1
        i = -1
        while i >= -len(combo):
            if combo[i] > test_right:
                test_right = combo[i]
                count_right = count_right + 1
            i = i - 1
        
        clue_ref = (count_left, count_right)
        if clue_ref in combo_dict:
            x = combo_dict[clue_ref]
            new = []
            for entry in x:
                new.append(entry)
            new.append(combo)
            combo_dict[clue_ref] = new
        else:
            combo_dict[clue_ref] = [combo]
    return combo_dict


def assign_rows(possible_rows, clues):
    rows = len(clues) // 4
    row_clues = []
    i = 0
    while i < rows:
        index1 = i + rows
        index2 = len(clues) - 1 - i
        row_clues.append((clues[index2], clues[index1]))
        i = i + 1
    rows_needed = []
    for entry in row_clues:
        this_row = []
        if entry[0] == 0 and entry[1] == 0:
            for key in possible_rows:
                this_row.extend(possible_rows[key])
            rows_needed.append(this_row)
            continue
        if entry[0] == 0:
            for key in possible_rows:
                if key[1] == entry[1]:
                    this_row.extend(possible_rows[key])
            rows_needed.append(this_row)
            continue
        if entry[1] == 0:
            for key in possible_rows:
                if key[0] == entry[0]:
                    this_row.extend(possible_rows[key])
            rows_needed.append(this_row)
            continue
        rows_needed.append(possible_rows[entry])
    
    return rows_needed


# Seperate out the clues for the top and the clues for the bottom

def isolate_clues(clues):
    length = len(clues) // 4
    i = 0
    top_clues = []
    bottom_clues = []
    while i < length:
        top_clues.append(clues[i])
        bottom_clues.append(clues[len(clues) - length - 1 - i])
        i = i + 1
    return top_clues, bottom_clues

def is_valid_column(column):
    numbers = set(column)
    for entry in numbers:
        if entry == 0:
            pass
        else:
            if column.count(entry) > 1:
                return False
    return True

def is_valid_board(board, top_clues, bottom_clues):

    length = len(board)
    #We will have to different evaluations depending on if the board is complete or partially complete.
    partial_board = (board[-1][0] == 0)
    #Solution for partial board.
    if partial_board:
        i = 0
        while i < length:
            clue = top_clues[i]
            if clue == 0:
                i = i + 1
                continue
            column = []
            
            for entry in board:
                column.append(entry[i])
            
            if is_valid_column(column):
                pass
            else:
                return False
            
            count = 0
            max = 0
            for entry in column:
                if entry > max:
                    max = entry
                    count = count + 1
            if count > clue:
                return False
            i = i + 1

        return True

    #Solution for complete board.
    i = 0
    while i < length:
        top_clue = top_clues[i]
        bottom_clue = bottom_clues[i]
        column = []
        for entry in board:
            column.append(entry[i])        
        
        if is_valid_column(column):
            pass
        else:
            return False
        
        t_count = 0
        max = 0
        for entry in column:
            if entry > max:
                max = entry
                t_count = t_count + 1
        
        column.reverse()
        b_count = 0
        max = 0
        for entry in column:
            if entry > max:
                max = entry
                b_count = b_count + 1
        
        if top_clue == 0:
            pass
        else:
            if top_clue != t_count:
                return False
        
        if bottom_clue == 0:
            pass
        else:
            if bottom_clue != b_count:
                return False
        
        i = i + 1
    return True
        

def solve_puzzle (clues):
    size = len(clues) // 4
    possible_rows = find_combos(len(clues) // 4)
    rows = assign_rows(possible_rows, clues)
    top_clues, bottom_clues = isolate_clues(clues)
    
    pointers = []
    
    i = 0
    while i < size:
        pointers.append(0)
        i = i + 1
    
    board = []
    i = 0
    while i < size:
        new_row = []
        j = 0
        while j < size:
            new_row.append(0)
            j = j + 1
        board.append(new_row)
        i = i + 1
    
    overwrite_row = board[0]
    
    master = 0 #Pointer for my pointers
    
    while master < size:

        if pointers[master] >= len(rows[master]):
            board[master] = overwrite_row
            pointers[master] = 0
            master = master - 1
            pointers[master] = pointers[master] + 1
            continue
        
        board[master] = rows[master][pointers[master]]
        
        if is_valid_board(board, top_clues, bottom_clues):
            master = master + 1
        else:
            pointers[master] = pointers[master] + 1
        
        i = i + 1
    
    final_board = tuple(board)
    return final_board
