def count_change(money, coins):    
    # Fill out the first row to avoid reference issues.
    coins.sort()
    coin = coins[0]
    i = 0
    row = []
    while i <= money:
        if i % coin == 0:
            row.append(1)
        else:
            row.append(0)
        i = i + 1
    memo = []
    memo.append(row)
    
    # Now that the base of the matrix in place we can use Dynamic Programming
    # to finish the other rows.
    
    i = 1
    while i < len(coins):
        coin = coins[i]
        new_row = []
        j = 0
        while j <= money:
            if j < coin:
                new_row.append(memo[i-1][j])
                j = j + 1
                continue
            exclude_the_coin = memo[i-1][j]
            include_the_coin = new_row[j - coin]
            total_ways = exclude_the_coin + include_the_coin
            new_row.append(total_ways)
            j = j + 1
        memo.append(new_row)
        i = i + 1
    return memo[-1][-1]
