# I'm going to try A*

import heapq

def hueristic(x, y, size):
    return (size- 1 - x) + (size - 1 - y)

def path_finder(maze):

    graph = maze.split('\n')
    size = len(graph)
    
    #Our queue will be a min heap based on minimum score.
    queue = [[hueristic(0, 0, size), 0, 0, 0]]
    visited = [(0,0)]
    heapq.heapify(queue)
    
    #As long as the queue is not empty we will keep checking.
    while len(queue) > 0:
        current_location = heapq.heappop(queue)
        steps = current_location[3] + 1
        x = current_location[1]
        y = current_location[2]
        
        # Examine possible moves in the four cardinal directions.
        moves = [(1,0),(0,1),(-1,0),(0,-1)]
        
        for move in moves:
            x1 = x + move[0]
            y1 = y + move[1]
            
            # Check to see if we have reached the end
            if (x1, y1) == (size - 1, size - 1):
                return steps
            
            # if the square has already been visited we can continue
            if (x1, y1) in visited:
                continue
            # if the square is within bounds we must analyze it    
            if 0 <= x1 < size and 0 <= y1 < size:
                if graph[x1][y1] == '.':
                    location = [steps + hueristic(x1,y1,size), x1, y1, steps]
                    heapq.heappush(queue, location)
                    visited.append((x1,y1))
                elif graph[x1][y1] == 'W':
                    visited.append((x1, y1))
                    
    return False
