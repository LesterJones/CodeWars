#Print a clean version of the matrix
def print_spiral(spiral):
    for entry in spiral:
        print(entry)

def spiralize(size):
    #Build an NxN matrix filled with zeros.
    spiral = []
    i = 0
    while i < size:
        j = 0
        row = []
        while j < size:
            row.append(0)
            j = j + 1
        spiral.append(row)
        i = i + 1
    #directions "  up, right, down, left"
    directions = [[-1,0],[0,1],[1,0],[0,-1]]
    direction = 1
    
    x = 0
    y = 0
     
    moves_in_direction = 0
    
    i = 0
    while i < 15000:
        spiral[x][y] = 1
        movement_x = directions[direction][0]
        movement_y = directions[direction][1]
        x1 = x + movement_x
        y1 = y + movement_y
        x2 = x + movement_x + movement_x
        y2 = y + movement_y + movement_y
        
        #Check if the second square in our current direction is 1
        #If it is we must turn and try again.
        
        if x2 >= 0 and y2 >= 0 and x2 < size and y2 < size:
            if spiral[x2][y2] == 1:
                if moves_in_direction < 2:
                    print_spiral(spiral)
                    return spiral
                direction = (direction + 1) % 4
                moves_in_direction = 0
                i = i + 1
                continue
        
        #Check if the square one square away is on the board.  If it is we
        #can move forward.  Else we have to turn and try again.
        if x1 >= 0 and y1 >= 0 and x1 < size and y1 < size:
            x = x1
            y = y1
            moves_in_direction = moves_in_direction + 1
        else:
            if moves_in_direction < 2:
                print(spiral)
                return spiral
            direction = (direction + 1) % 4
            moves_in_direction = 0
        i = i + 1
    return "Error"
